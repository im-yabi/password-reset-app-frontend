{"ast":null,"code":"const express = require(\"express\");\nconst bcrypt = require(\"bcryptjs\");\nconst crypto = require(\"crypto\");\nconst jwt = require(\"jsonwebtoken\");\nconst User = require(\"../models/User\");\nconst sendEmail = require(\"../utils/sendEmail\");\nconst router = express.Router();\n\n/* ============================\r\n   ✅ REGISTER\r\n============================ */\nrouter.post(\"/register\", async (req, res) => {\n  const {\n    name,\n    age,\n    dob,\n    occupation,\n    education,\n    email,\n    password\n  } = req.body;\n  try {\n    let user = await User.findOne({\n      email\n    });\n    if (user) return res.status(400).json({\n      msg: \"User already exists\"\n    });\n    const hashedPassword = await bcrypt.hash(password, 10);\n    user = new User({\n      name,\n      age,\n      dob,\n      occupation,\n      education,\n      email,\n      password: hashedPassword\n    });\n    await user.save();\n    res.json({\n      msg: \"User registered successfully\"\n    });\n  } catch (err) {\n    console.error(\"Register error:\", err.message);\n    res.status(500).json({\n      msg: \"Server error\"\n    });\n  }\n});\n\n/* ============================\r\n   ✅ LOGIN (returns JWT)\r\n============================ */\nrouter.post(\"/login\", async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n  try {\n    const user = await User.findOne({\n      email\n    });\n    if (!user) return res.status(400).json({\n      msg: \"Invalid credentials\"\n    });\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) return res.status(400).json({\n      msg: \"Invalid credentials\"\n    });\n\n    // generate JWT\n    const token = jwt.sign({\n      id: user._id\n    }, process.env.JWT_SECRET, {\n      expiresIn: \"1h\"\n    });\n    res.json({\n      msg: \"Login successful\",\n      token\n    });\n  } catch (err) {\n    console.error(\"Login error:\", err.message);\n    res.status(500).json({\n      msg: \"Server error\"\n    });\n  }\n});\n\n/* ============================\r\n   ✅ Middleware: Auth check\r\n============================ */\nconst authMiddleware = (req, res, next) => {\n  const token = req.headers[\"authorization\"];\n  if (!token) return res.status(401).json({\n    msg: \"No token, access denied\"\n  });\n  try {\n    const decoded = jwt.verify(token.split(\" \")[1], process.env.JWT_SECRET);\n    req.user = decoded;\n    next();\n  } catch (err) {\n    res.status(401).json({\n      msg: \"Invalid token\"\n    });\n  }\n};\n\n/* ============================\r\n   ✅ PROFILE (secured)\r\n============================ */\nrouter.get(\"/profile\", authMiddleware, async (req, res) => {\n  try {\n    const user = await User.findById(req.user.id).select(\"-password -resetToken -resetTokenExpire\");\n    if (!user) return res.status(404).json({\n      msg: \"User not found\"\n    });\n    res.json(user);\n  } catch (err) {\n    console.error(\"Profile error:\", err.message);\n    res.status(500).json({\n      msg: \"Server error\"\n    });\n  }\n});\n\n/* ============================\r\n   ✅ FORGOT PASSWORD\r\n============================ */\nrouter.post(\"/forgot-password\", async (req, res) => {\n  const {\n    email\n  } = req.body;\n  try {\n    const user = await User.findOne({\n      email\n    });\n    if (!user) return res.status(400).json({\n      msg: \"User not found\"\n    });\n    const resetToken = crypto.randomBytes(32).toString(\"hex\");\n    user.resetToken = resetToken;\n    user.resetTokenExpire = Date.now() + 15 * 60 * 1000; // 15 min\n    await user.save();\n    const resetURL = `${process.env.CLIENT_URL}/reset-password/${resetToken}`;\n    await sendEmail(email, \"Password Reset Request\", `<p>You requested a password reset.</p>\n       <a href=\"${resetURL}\">${resetURL}</a>`);\n    res.json({\n      msg: \"Password reset link sent to your email\"\n    });\n  } catch (err) {\n    console.error(\"Forgot password error:\", err.message);\n    res.status(500).json({\n      msg: \"Server error\"\n    });\n  }\n});\n\n/* ============================\r\n   ✅ RESET PASSWORD\r\n============================ */\nrouter.post(\"/reset-password/:token\", async (req, res) => {\n  const {\n    password\n  } = req.body;\n  try {\n    const user = await User.findOne({\n      resetToken: req.params.token,\n      resetTokenExpire: {\n        $gt: Date.now()\n      }\n    });\n    if (!user) return res.status(400).json({\n      msg: \"Invalid or expired token\"\n    });\n    user.password = await bcrypt.hash(password, 10);\n    user.resetToken = undefined;\n    user.resetTokenExpire = undefined;\n    await user.save();\n    res.json({\n      msg: \"Password updated successfully\"\n    });\n  } catch (err) {\n    console.error(\"Reset password error:\", err.message);\n    res.status(500).json({\n      msg: \"Server error\"\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","bcrypt","crypto","jwt","User","sendEmail","router","Router","post","req","res","name","age","dob","occupation","education","email","password","body","user","findOne","status","json","msg","hashedPassword","hash","save","err","console","error","message","isMatch","compare","token","sign","id","_id","process","env","JWT_SECRET","expiresIn","authMiddleware","next","headers","decoded","verify","split","get","findById","select","resetToken","randomBytes","toString","resetTokenExpire","Date","now","resetURL","CLIENT_URL","params","$gt","undefined","module","exports"],"sources":["C:/Documents/GitHub/password-reset-app-FE/password-reset-app-fe/src/components/Profile.jsx"],"sourcesContent":["const express = require(\"express\");\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst crypto = require(\"crypto\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst User = require(\"../models/User\");\r\nconst sendEmail = require(\"../utils/sendEmail\");\r\n\r\nconst router = express.Router();\r\n\r\n/* ============================\r\n   ✅ REGISTER\r\n============================ */\r\nrouter.post(\"/register\", async (req, res) => {\r\n  const { name, age, dob, occupation, education, email, password } = req.body;\r\n  try {\r\n    let user = await User.findOne({ email });\r\n    if (user) return res.status(400).json({ msg: \"User already exists\" });\r\n\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n    user = new User({\r\n      name,\r\n      age,\r\n      dob,\r\n      occupation,\r\n      education,\r\n      email,\r\n      password: hashedPassword,\r\n    });\r\n    await user.save();\r\n\r\n    res.json({ msg: \"User registered successfully\" });\r\n  } catch (err) {\r\n    console.error(\"Register error:\", err.message);\r\n    res.status(500).json({ msg: \"Server error\" });\r\n  }\r\n});\r\n\r\n/* ============================\r\n   ✅ LOGIN (returns JWT)\r\n============================ */\r\nrouter.post(\"/login\", async (req, res) => {\r\n  const { email, password } = req.body;\r\n  try {\r\n    const user = await User.findOne({ email });\r\n    if (!user) return res.status(400).json({ msg: \"Invalid credentials\" });\r\n\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n    if (!isMatch) return res.status(400).json({ msg: \"Invalid credentials\" });\r\n\r\n    // generate JWT\r\n    const token = jwt.sign(\r\n      { id: user._id },\r\n      process.env.JWT_SECRET,\r\n      { expiresIn: \"1h\" }\r\n    );\r\n\r\n    res.json({\r\n      msg: \"Login successful\",\r\n      token,\r\n    });\r\n  } catch (err) {\r\n    console.error(\"Login error:\", err.message);\r\n    res.status(500).json({ msg: \"Server error\" });\r\n  }\r\n});\r\n\r\n/* ============================\r\n   ✅ Middleware: Auth check\r\n============================ */\r\nconst authMiddleware = (req, res, next) => {\r\n  const token = req.headers[\"authorization\"];\r\n  if (!token) return res.status(401).json({ msg: \"No token, access denied\" });\r\n\r\n  try {\r\n    const decoded = jwt.verify(token.split(\" \")[1], process.env.JWT_SECRET);\r\n    req.user = decoded;\r\n    next();\r\n  } catch (err) {\r\n    res.status(401).json({ msg: \"Invalid token\" });\r\n  }\r\n};\r\n\r\n/* ============================\r\n   ✅ PROFILE (secured)\r\n============================ */\r\nrouter.get(\"/profile\", authMiddleware, async (req, res) => {\r\n  try {\r\n    const user = await User.findById(req.user.id)\r\n      .select(\"-password -resetToken -resetTokenExpire\");\r\n    if (!user) return res.status(404).json({ msg: \"User not found\" });\r\n    res.json(user);\r\n  } catch (err) {\r\n    console.error(\"Profile error:\", err.message);\r\n    res.status(500).json({ msg: \"Server error\" });\r\n  }\r\n});\r\n\r\n/* ============================\r\n   ✅ FORGOT PASSWORD\r\n============================ */\r\nrouter.post(\"/forgot-password\", async (req, res) => {\r\n  const { email } = req.body;\r\n  try {\r\n    const user = await User.findOne({ email });\r\n    if (!user) return res.status(400).json({ msg: \"User not found\" });\r\n\r\n    const resetToken = crypto.randomBytes(32).toString(\"hex\");\r\n    user.resetToken = resetToken;\r\n    user.resetTokenExpire = Date.now() + 15 * 60 * 1000; // 15 min\r\n    await user.save();\r\n\r\n    const resetURL = `${process.env.CLIENT_URL}/reset-password/${resetToken}`;\r\n    await sendEmail(\r\n      email,\r\n      \"Password Reset Request\",\r\n      `<p>You requested a password reset.</p>\r\n       <a href=\"${resetURL}\">${resetURL}</a>`\r\n    );\r\n\r\n    res.json({ msg: \"Password reset link sent to your email\" });\r\n  } catch (err) {\r\n    console.error(\"Forgot password error:\", err.message);\r\n    res.status(500).json({ msg: \"Server error\" });\r\n  }\r\n});\r\n\r\n/* ============================\r\n   ✅ RESET PASSWORD\r\n============================ */\r\nrouter.post(\"/reset-password/:token\", async (req, res) => {\r\n  const { password } = req.body;\r\n  try {\r\n    const user = await User.findOne({\r\n      resetToken: req.params.token,\r\n      resetTokenExpire: { $gt: Date.now() },\r\n    });\r\n    if (!user) return res.status(400).json({ msg: \"Invalid or expired token\" });\r\n\r\n    user.password = await bcrypt.hash(password, 10);\r\n    user.resetToken = undefined;\r\n    user.resetTokenExpire = undefined;\r\n    await user.save();\r\n\r\n    res.json({ msg: \"Password updated successfully\" });\r\n  } catch (err) {\r\n    console.error(\"Reset password error:\", err.message);\r\n    res.status(500).json({ msg: \"Server error\" });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}